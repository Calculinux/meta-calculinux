name: Build Calculinux Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Yocto build directories that need persistent storage
  DL_DIR: ${{ github.workspace }}/../yocto-cache/downloads
  SSTATE_DIR: ${{ github.workspace }}/../yocto-cache/sstate-cache
  # Package repository storage
  OPKG_REPO_DIR: /mnt/opkg-repo

permissions:
  contents: write  # Needed for creating releases

jobs:
  build:
    name: Build Yocto Images
    runs-on: [self-hosted, Linux, X64]
    
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Luckfox Lyra Bundle"
            kas_file: "kas-luckfox-lyra-bundle.yaml"
            target: "picocalc-bundle"
            machine: "luckfox-lyra"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up build environment
      run: |
        # Create cache directories if they don't exist
        mkdir -p $DL_DIR $SSTATE_DIR
        
        # Verify package repository storage exists
        if [ ! -d "$OPKG_REPO_DIR" ]; then
          echo "ERROR: Package repository storage $OPKG_REPO_DIR not found"
          echo "Please ensure storage is mounted at /mnt/opkg-repo"
          exit 1
        fi
        
        # Clean up any leftover containers and images from previous builds
        docker system prune -f || true
        
        # Show disk space before build
        df -h

    - name: Determine feed configuration
      id: feed-config
      run: |
        if [ "${{ github.ref_name }}" = "main" ]; then
          # Use distro codename for stable releases (e.g., walnascar, scarthgap)
          DISTRO_CODENAME=$(./kas-container shell kas-luckfox-lyra-bundle.yaml -c "bitbake -e | grep '^DISTRO_CODENAME=' | cut -d'\"' -f2")
          echo "feed_name=${DISTRO_CODENAME}" >> $GITHUB_OUTPUT
          echo "subfolder=continuous" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref_name }}" = "develop" ]; then
          # Use "develop" for all development builds
          echo "feed_name=develop" >> $GITHUB_OUTPUT
          echo "subfolder=continuous" >> $GITHUB_OUTPUT
        else
          # Tagged releases - assume from main branch, use distro codename
          DISTRO_CODENAME=$(./kas-container shell kas-luckfox-lyra-bundle.yaml -c "bitbake -e | grep '^DISTRO_CODENAME=' | cut -d'\"' -f2")
          echo "feed_name=${DISTRO_CODENAME}" >> $GITHUB_OUTPUT
          echo "subfolder=release" >> $GITHUB_OUTPUT
        fi
        
        echo "Feed configuration complete"

    - name: Build Yocto image
      run: |
        echo "Building ${{ matrix.config.name }} using ${{ matrix.config.kas_file }}"
        
        # Run the build with kas-container
        ./kas-container build ${{ matrix.config.kas_file }}

    - name: Collect build artifacts
      run: |
        echo "Collecting build artifacts..."
        
        # Find the build directory
        BUILD_DIR=$(find build -name "tmp" -type d | head -1 | sed 's|/tmp||')
        DEPLOY_DIR="${BUILD_DIR}/tmp/deploy/images/${{ matrix.config.machine }}"
        
        echo "Deploy directory: $DEPLOY_DIR"
        
        if [ -d "$DEPLOY_DIR" ]; then
          # Create artifacts directory
          mkdir -p artifacts
          
          # Copy image files
          find "$DEPLOY_DIR" -name "*.wic.gz" -o -name "*.wic.bz2" -o -name "*.wic.xz" | \
            xargs -I {} cp {} artifacts/ || true
          
          # Copy update bundles (RAUC bundles)
          find "$DEPLOY_DIR" -name "*.raucb" | \
            xargs -I {} cp {} artifacts/ || true
          
          # Copy other important files
          find "$DEPLOY_DIR" -name "*.manifest" -o -name "*.testdata.json" | \
            xargs -I {} cp {} artifacts/ || true
          
          # List what we collected
          echo "Collected artifacts:"
          ls -la artifacts/
        else
          echo "Deploy directory not found: $DEPLOY_DIR"
          echo "Available directories:"
          find build -type d -name "deploy" || true
        fi

    - name: Publish artifacts to webserver
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
      run: |
        echo "Publishing artifacts to webserver..."
        
        FEED_NAME="${{ steps.feed-config.outputs.feed_name }}"
        SUBFOLDER="${{ steps.feed-config.outputs.subfolder }}"
        UPDATE_DIR="$OPKG_REPO_DIR/update/$FEED_NAME/$SUBFOLDER"
        IMAGE_DIR="$OPKG_REPO_DIR/image/$FEED_NAME/$SUBFOLDER"
        
        # Create target directories
        mkdir -p "$UPDATE_DIR" "$IMAGE_DIR"
        
        # Copy RAUC bundles to update directory
        if ls artifacts/*.raucb 1> /dev/null 2>&1; then
          echo "Copying RAUC bundles to $UPDATE_DIR"
          cp artifacts/*.raucb "$UPDATE_DIR/"
          echo "Published RAUC bundles:"
          ls -la "$UPDATE_DIR"/*.raucb
        else
          echo "No RAUC bundles found to publish"
        fi
        
        # Copy WIC images to image directory
        if ls artifacts/*.wic.gz 1> /dev/null 2>&1; then
          echo "Copying WIC images to $IMAGE_DIR"
          cp artifacts/*.wic.gz "$IMAGE_DIR/"
          echo "Published WIC images:"
          ls -la "$IMAGE_DIR"/*.wic.gz
        else
          echo "No WIC images found to publish"
        fi
        
        echo "Artifacts published successfully"

    - name: Generate build information
      run: |
        # Create build info file
        cat > artifacts/build-info.txt << EOF
        Build Information
        =================
        Repository: ${{ github.repository }}
        Commit: ${{ github.sha }}
        Branch/Tag: ${{ github.ref_name }}
        Build Date: $(date -u)
        Configuration: ${{ matrix.config.name }}
        Machine: ${{ matrix.config.machine }}
        Target: ${{ matrix.config.target }}
        Kas File: ${{ matrix.config.kas_file }}
        Dockerfile: ${{ matrix.config.dockerfile }}
        Workflow: ${{ github.workflow }}
        Run Number: ${{ github.run_number }}
        EOF
        
        # Add git information if available
        if git log -1 --format="%H %s" >> artifacts/build-info.txt 2>/dev/null; then
          echo "Last Commit: $(git log -1 --format='%H %s')" >> artifacts/build-info.txt
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: calculinux-${{ matrix.config.machine }}-${{ github.run_number }}
        path: artifacts/
        retention-days: 30

    - name: Create release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

    - name: Show disk space after build
      if: always()
      run: |
        echo "Disk space after build:"
        df -h
        
        echo "Cache directory sizes:"
        du -sh $DL_DIR $SSTATE_DIR || true

    - name: Cleanup
      if: always()
      run: |
        # Clean up build directory but preserve caches
        rm -rf build/tmp/work/* || true
        
        # Clean up docker containers and images
        docker system prune -f || true
        
        # Remove our custom image to save space
        docker rmi kas-custom:latest || true
